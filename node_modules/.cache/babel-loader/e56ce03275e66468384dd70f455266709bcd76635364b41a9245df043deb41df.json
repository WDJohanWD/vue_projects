{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport Swal from 'sweetalert2';\nexport default {\n  name: \"TablaClientes\",\n  components: {},\n  data() {\n    return {\n      cliente: {\n        dni: '',\n        alta: '',\n        apellidos: '',\n        nombre: '',\n        direccion: '',\n        email: '',\n        provincia: '',\n        municipio: '',\n        baja: '',\n        telefono: ''\n      },\n      clientes: [],\n      provincias: [],\n      municipios: [],\n      errores: [],\n      currentPage: 1,\n      pageSize: 5,\n      isChecked: false,\n      editDni: false\n    };\n  },\n  mounted() {\n    this.getClientes();\n    this.getProvincias();\n    this.getMunicipios();\n  },\n  computed: {\n    clientePorPagina() {\n      const cleintesFiltrados = this.filtroClientes;\n      const indiceInicial = (this.currentPage - 1) * this.pageSize;\n      return cleintesFiltrados.slice(indiceInicial, indiceInicial + this.pageSize);\n    },\n    filtroClientes() {\n      if (this.isChecked) {\n        return this.clientes;\n      } else {\n        return this.clientes.filter(cliente => !cliente.baja);\n      }\n    },\n    municipiosFiltrados() {\n      if (!this.cliente.provincia || !this.cliente.provincia.id) return [];\n      return this.municipios.filter(municipio => municipio.id.startsWith(this.cliente.provincia.id));\n    }\n  },\n  methods: {\n    siguientePagina() {\n      if (this.currentPage * this.pageSize < this.clientes.length) {\n        this.currentPage++;\n      }\n    },\n    paginaAnterior() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    async seleccionaCliente(cliente) {\n      try {\n        this.limpiarFormCli();\n        const response = await fetch('http://localhost:3000/clientes');\n        if (!response.ok) {\n          throw new Error('Error en la solicitud: ' + response.statusText);\n        }\n        const clientes = await response.json();\n\n        // Encontrar el cliente por su DNI\n        const clienteEncontrado = clientes.find(c => c.dni === cliente.dni);\n        if (clienteEncontrado) {\n          // Convertir la fecha de alta al formato dd/mm/yyyy\n          // Asignar el objeto completo de provincia y municipio\n          if (this.cliente.provincia) {\n            this.cliente.provincia = this.provincias.find(p => p.nm === this.cliente.provincia).nm;\n            if (this.cliente.provincia) {\n              console.log(\"Provincia encontrada\", this.cliente.provincia);\n            }\n          }\n          this.cliente = {\n            ...clienteEncontrado\n          };\n          this.editDni = true;\n          console.log(\"Cliente encontrado\", this.cliente.municipio);\n          if (this.cliente.alta) {\n            this.cliente.alta = this.cliente.alta.split('T')[0]; // Para asegurarse de que la fecha esté en formato YYYY-MM-DD\n          }\n        } else {\n          this.mostrarAlerta('Error', 'Cliente no encontrado en el servidor.', 'error');\n        }\n      } catch (error) {\n        console.error(error);\n        this.mostrarAlerta('Error', 'No se pudo cargar el cliente desde el servidor.', 'error');\n      }\n    },\n    limpiarFormCli() {\n      this.cliente = {\n        dni: '',\n        alta: '',\n        apellidos: '',\n        nombre: '',\n        direccion: '',\n        email: '',\n        provincia: '',\n        municipio: '',\n        baja: ''\n      };\n      this.editDni = false;\n    },\n    validarDNI(dni) {\n      if (dni === '') {\n        // Si el campo está vacío, no hace nada\n        return true;\n      }\n      dni = dni.toUpperCase(); // Convertir a mayúsculas\n      this.cliente.dni = dni;\n      // Comprobar el formato del DNI/NIE\n      const dniRegex = /^[XYZ0-9][0-9]{7}[A-Z]$/; // Formato 8 dígitos seguido de 1 letra\n\n      if (!dniRegex.test(dni)) {\n        this.mostrarAlerta('Error', 'El NIE/DNI con formato no válido.', 'error');\n        return false;\n      }\n\n      // Inicializar variables para el cálculo\n      let dniNum = dni.substring(0, 8); // Extraer los númerhttp://localhost:3000/provinciasos\n      const letra = dni.charAt(8); // Obtener la letra en la posición 8\n      // Identificación del NIE y sustitución\n      if (dniNum.charAt(0) === 'X') {\n        dniNum = dniNum.substring(1, 8);\n        dniNum = '0' + dniNum; // Sustituir X por 0\n      } else if (dniNum.charAt(0) === 'Y') {\n        dniNum = dniNum.substring(1, 8);\n        dniNum = '1' + dniNum; // Sustituir Y por 1\n      } else if (dni.charAt(0) === 'Z') {\n        dniNum = dniNum.substring(1, 8);\n        dniNum = '2' + dniNum; // Sustituir Z por 2\n      }\n\n      // Comprobar la letra esperada\n      const letras = 'TRWAGMYFPDXBNJZSQVHLCKE'; // Letras válidas para el DNI\n      const letraCalculada = letras[dniNum % 23]; // Calcular la letra esperada\n      if (letra !== letraCalculada) {\n        this.mostrarAlerta('Error', 'DNI/NIE Incorrecto.', 'error');\n        return false;\n      }\n      return true; // DNI/NIE válido\n    },\n    validarTelefono(telefono) {\n      if (telefono == '') {\n        this.mostrarAlerta('Error', 'El teléfono con formato no valido', 'error');\n      }\n      const regex = /^[67]\\d{8}$/;\n      if (!regex.test(telefono)) {\n        this.mostrarAlerta('Error', 'El teléfono con formato no valido', 'error');\n      }\n    },\n    async getClientes() {\n      try {\n        const response = await fetch('http://localhost:3000/clientes');\n        if (!response.ok) {\n          throw new Error('Error en la solicitud:' + response.statusText);\n        }\n        this.clientes = (await response.json()).sort((a, b) => a.apellidos.localeCompare(b.apellidos) || a.nombre.localeCompare(b.nombre));\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getProvincias() {\n      try {\n        const response = await fetch('http://localhost:3000/provincias');\n        if (!response.ok) {\n          throw new Error('Error en la solicitud:' + response.statusText);\n        }\n        this.provincias = await response.json();\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async getMunicipios() {\n      try {\n        const response = await fetch('http://localhost:3000/municipios');\n        if (!response.ok) {\n          throw new Error('Error en la solicitud:' + response.statusText);\n        }\n        this.municipios = await response.json();\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    mostrarAlerta(titulo, mensaje, icono) {\n      Swal.fire({\n        title: titulo,\n        text: mensaje,\n        icon: icono,\n        customClass: {\n          container: 'custom-alert-container',\n          popup: 'custom-alert-popup',\n          modal: 'custom-alert-modal'\n        }\n      });\n    },\n    obtenerFechaHoy() {\n      const fecha = new Date();\n      const opciones = {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      };\n      const fechaFormateada = new Intl.DateTimeFormat('es-ES', opciones).format(fecha);\n      //return fecha.toLocaleDateString('es-ES');  // Formato dd/mm/yyyy\n      return fechaFormateada;\n    },\n    async grabarcliente() {\n      // Verificar si los campos requeridos están llenos\n      if (this.cliente.dni && this.cliente.apellidos && this.cliente.telefono) {\n        try {\n          this.cliente.baja = '';\n          // Obtener los clientes existentes\n          const response = await fetch('http://localhost:3000/clientes');\n          if (!response.ok) {\n            throw new Error('Error al obtener los clientes: ' + response.statusText);\n          }\n          const clientesExistentes = await response.json();\n          const clienteExistente = clientesExistentes.find(cliente => cliente.dni === this.cliente.dni);\n          if (clienteExistente) {\n            clienteExistente.baja = '';\n            const actualizarResponse = await fetch(`http://localhost:3000/clientes/${clienteExistente.id}`, {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(clienteExistente)\n            });\n            if (!actualizarResponse.ok) {\n              throw new Error('Error al actualizar el cliente: ' + actualizarResponse.statusText);\n            }\n            this.mostrarAlerta('Aviso', 'Cliente reactivado correctamente', 'success');\n            this.getClientes();\n          } else {\n            const crearResponse = await fetch('http://localhost:3000/clientes', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(this.cliente)\n            });\n            if (!crearResponse.ok) {\n              throw new Error('Error al guardar el cliente: ' + crearResponse.statusText);\n            }\n            const nuevoCliente = await crearResponse.json();\n            this.clientes.push(nuevoCliente);\n            this.mostrarAlerta('Aviso', 'Cliente grabado correctamente', 'success');\n            this.getClientes();\n          }\n        } catch (error) {\n          console.error(error);\n          this.mostrarAlerta('Error', 'No se pudo grabar el cliente.', 'error');\n        }\n      } else {\n        this.mostrarAlerta('Error', 'Por favor, completa todos los campos requeridos.', 'error');\n      }\n    },\n    async eliminarcliente() {\n      try {\n        const response = await fetch(\"http://localhost:3000/clientes\");\n        if (!response.ok) {\n          throw new Error(\"Error en la solicitud: \" + response.statusText);\n        }\n        const clientes = await response.json();\n        const clienteExistente = clientes.find(cliente => cliente.dni === this.cliente.dni);\n        if (clienteExistente) {\n          const fechaHoy = this.obtenerFechaHoy(); // Llamada a la función correctamente\n\n          clienteExistente.baja = fechaHoy;\n          await fetch(`http://localhost:3000/clientes/${clienteExistente.id}`, {\n            // URL interpolada correctamente\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(clienteExistente)\n          });\n          this.mostrarAlerta(\"Aviso\", \"Cliente dado de baja correctamente\", \"success\");\n          this.getClientes(); // Actualizar lista de clientes\n        } else {\n          this.mostrarAlerta(\"Error\", \"Cliente no encontrado\", \"error\");\n        }\n      } catch (error) {\n        console.error(error);\n        this.mostrarAlerta(\"Error\", \"No se pudo dar de baja al cliente\", \"error\");\n      }\n    },\n    async modificarcliente() {\n      if (this.cliente.dni) {\n        try {\n          const response = await fetch(`http://localhost:3000/clientes/${this.cliente.id}`, {\n            // URL interpolada correctamente\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(this.cliente)\n          });\n          if (!response.ok) {\n            throw new Error('Error al modificar el cliente:' + response.statusText);\n          }\n          this.mostrarAlerta(\"Aviso\", \"Cliente modificado correctamente\", \"success\");\n          this.getClientes();\n        } catch (error) {\n          console.error(error);\n        }\n      } else {\n        this.mostrarAlerta('Error', 'Debe seleccionar un cliente para modificar', 'error');\n      }\n    }\n  }\n};","map":{"version":3,"names":["Swal","name","components","data","cliente","dni","alta","apellidos","nombre","direccion","email","provincia","municipio","baja","telefono","clientes","provincias","municipios","errores","currentPage","pageSize","isChecked","editDni","mounted","getClientes","getProvincias","getMunicipios","computed","clientePorPagina","cleintesFiltrados","filtroClientes","indiceInicial","slice","filter","municipiosFiltrados","id","startsWith","methods","siguientePagina","length","paginaAnterior","seleccionaCliente","limpiarFormCli","response","fetch","ok","Error","statusText","json","clienteEncontrado","find","c","p","nm","console","log","split","mostrarAlerta","error","validarDNI","toUpperCase","dniRegex","test","dniNum","substring","letra","charAt","letras","letraCalculada","validarTelefono","regex","sort","a","b","localeCompare","titulo","mensaje","icono","fire","title","text","icon","customClass","container","popup","modal","obtenerFechaHoy","fecha","Date","opciones","day","month","year","fechaFormateada","Intl","DateTimeFormat","format","grabarcliente","clientesExistentes","clienteExistente","actualizarResponse","method","headers","body","JSON","stringify","crearResponse","nuevoCliente","push","eliminarcliente","fechaHoy","modificarcliente"],"sources":["/home/a23johanfav/apontejohan/src/components/TablaClientes.vue"],"sourcesContent":["<template>\n  <div class=\"row\">\n    \n    <h5 class=\"mt-3 text-center front-weight-bold\"><i class=\"bi bi-people\"></i>GESTIÓN CLIENTES</h5>\n  </div>\n  <br>\n  <div class=\"container-fluid border p-4\">\n    <form class=\"form-in-line\">\n      <div class=\"col-10 col-m-6 col-lg-8 mx-auto\">\n        <div class=\"input-group-text mb-3\">\n          <span class=\"input-group-text custom-span me-2\">DNI/NIE:</span>\n          <input type=\"text\" class=\"form-control sm w-25\" placeholder=\"DNI-NIE\" v-model=\"cliente.dni\"\n            @blur=\"validarDNI(this.cliente.dni)\" :disabled=\"editDni\">\n\n          <span class=\"input-group-text custom-span ms-auto me-2\">Fecha Alta:</span>\n          <input type=\"date\" class=\"form-control sm w-25\" placeholder=\"Fecha Alta\" v-model=\"cliente.alta\">\n         \n        </div>\n        <div class=\"input-group-text mb-3\">\n          <span class=\"input-group-text custom-span me-2\">Apellidos: </span>\n          <input type=\"text\" class=\"form-control sm w-50\" placeholder=\"Apellidos\" v-model=\"cliente.apellidos\">\n          <span class=\"input-group-text custom-span ms-2 me-2\">Nombre: </span>\n          <input type=\"text\" class=\"form-control sm w-50\" placeholder=\"Nombre\" v-model=\"cliente.nombre\">\n        </div>\n        <div class=\"input-group-text mb-3\">\n          <span class=\"input-group-text custom-span me-2\">Dirección: </span>\n          <input type=\"text\" class=\"form-control sm w-50\" placeholder=\"Dirección\" v-model=\"cliente.direccion\">\n          <span class=\"input-group-text custom-span ms-2 me-2\">Email: </span>\n          <input type=\"email\" class=\"form-control sm w-50\" placeholder=\"Email\" v-model=\"cliente.email\">\n        </div>\n\n        <div class=\"input-group-text mb-3\">\n          <span class=\"input-group-text custom-span me-2\">Teléfono:</span>\n          <input class=\"form-control sm w-25\" type=\"text\" v-model=\"cliente.telefono\"\n            @blur=\"validarTelefono(this.cliente.telefono)\" placeholder=\"Teléfono\">\n          <span class=\"input-group-text custom-span me-2 ms-2\">Provincia: </span>\n          <select name=\"provincia\" class=\"form-control sm w-25\" v-model=\"cliente.provincia\">\n            <option value=\"\">Provincia</option>\n            <option v-for=\"provincia in provincias\" :key=\"provincia.id\" :value=\"provincia\">\n              {{ provincia.nm }}\n            </option>\n          </select>\n          <span class=\"input-group-text custom-span ms-2 me-2\">Municipio: </span>\n          <select name=\"municipio\" class=\"form-control sm w-50\" v-model=\"cliente.municipio\">\n            <option value=\"\">Municipio</option>\n            <option v-for=\"municipio in municipiosFiltrados\" :key=\"municipio.id\" :value=\"municipio\">\n              {{ municipio.nm }}\n            </option>\n          </select>\n\n          <input type=\"checkbox\" class=\"m-2\" name=\"historico\" v-model=\"isChecked\">\n          <label for=\"bg input-group-text custom-span ms-2 me-2\">Histórico</label>\n\n          <button class=\"btn btn-light m-1\" @click=\"limpiarFormCli()\">\n            <i class=\"bi-arrow-clockwise\"></i>\n          </button>\n\n        </div>\n      </div>\n      <button class=\"btn btn-primary m-1\" @click.prevent=\"grabarcliente\">Alta</button>\n      <button class=\"btn btn-primary m-1\" @click.prevent=\"modificarcliente\">Modificar</button>\n      <button class=\"btn btn-primary m-1\" @click.prevent=\"eliminarcliente\">Eliminar</button>\n    </form>\n  </div>\n\n\n  <div>\n    <div class=\"container my-5\">\n      <h2 class=\"mb-4\">Lista de Datos</h2>\n      <div class=\"container my-2\">\n        <div class=\"table-responsive\">\n          <table class=\"table table-striped\">\n            <thead class=\"table-info rounded-header\">\n              <tr>\n                <th scope=\"col\" class=\"w-15 text-center\">DNI</th>\n                <th scope=\"col\" class=\"w-20\">Apellidos</th>\n                <th scope=\"col\" class=\"w-20\">Nombre</th>\n                <th scope=\"col\" class=\"w-20 text-center\">Email</th>\n                <th scope=\"col\" class=\"w-10\">Telefono</th>\n                <th scope=\"col\" class=\"w-10 text-center\">Fecha Baja</th>\n                <th scope=\"col\" class=\"pale-yellow table-warning\">Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"cliente in clientePorPagina\" :key=\"cliente.id\">\n                <td class=\"align-middle\">{{ cliente.dni }}</td>\n                <td class=\"align-middle\">{{ cliente.apellidos }}</td>\n                <td class=\"align-middle\">{{ cliente.nombre }}</td>\n                <td class=\"align-middle\">{{ cliente.email }}</td>\n                <td class=\"align-middle\">{{ cliente.telefono }}</td>\n                <td class=\"align-middle\">{{ cliente.baja }}</td>\n                <td class=\"text-center align-middle pale-yellow table-warning\">\n                  <div>\n                    <button class=\"btn btn-warning m-2\" @click=\"seleccionaCliente(cliente)\">\n                      <i class=\"fas fa-pencil-alt\"></i>\n                    </button>\n                    <!--\n                    <button class=\"btn btn-danger m-2\" @click=\"deleteCliente(cliente.dni)\">\n                      <i class=\"bi bi-trash\"></i>\n                    </button>\n                    -->\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n\n          <div class=\"d-flex justify-content-center my-3\">\n            <button class=\"btn btn-primary\" :disabled=\"currentPage === 1\" @click=\"paginaAnterior\">\n              <i class=\"bi bi-chevron-left\"> </i>\n            </button>\n            <span class=\"mx-3 align-self-center\">Página {{ currentPage }}</span>\n\n            <button class=\"btn btn-primary\" :disabled=\"currentPage * pageSize >= filtroClientes.length\"\n              @click=\"siguientePagina\">\n              <i class=\"bi bi-chevron-right\"></i>\n            </button>\n          </div>\n\n\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Swal from 'sweetalert2';\n\nexport default {\n  name: \"TablaClientes\",\n  components: {\n  },\n\n  data() {\n    return {\n\n      cliente: {\n        dni: '',\n        alta: '',\n        apellidos: '',\n        nombre: '',\n        direccion: '',\n        email: '',\n        provincia: '',\n        municipio: '',\n        baja: '',\n        telefono: ''\n      },\n\n      clientes: [],\n      provincias: [],\n      municipios: [],\n      errores: [],\n      currentPage: 1,\n      pageSize: 5,\n      isChecked: false,\n      editDni: false\n    };\n  },\n\n  mounted() {\n    this.getClientes();\n    this.getProvincias();\n    this.getMunicipios();\n  },\n\n\n  computed: {\n    clientePorPagina(){\n      const cleintesFiltrados = this.filtroClientes;\n      const indiceInicial = (this.currentPage - 1) * this.pageSize;\n      return cleintesFiltrados.slice(indiceInicial, indiceInicial + this.pageSize)\n    },\n\n    filtroClientes() {\n      if (this.isChecked) {\n        return this.clientes;\n      } else {\n        return this.clientes.filter(cliente => !cliente.baja);\n      }\n    },\n\n    municipiosFiltrados() {\n      if (!this.cliente.provincia || !this.cliente.provincia.id) return [];\n\n      return this.municipios.filter(municipio =>\n        municipio.id.startsWith(this.cliente.provincia.id)\n      )\n    },\n  },\n\n  methods: {\n    siguientePagina(){\n      if(this.currentPage * this.pageSize < this.clientes.length){\n        this.currentPage++;\n      }\n    },\n\n\n    \n    paginaAnterior(){\n      if(this.currentPage > 1){\n        this.currentPage--;\n      }\n    },\n\n    async seleccionaCliente(cliente) {\n      try {\n        this.limpiarFormCli()\n        const response = await fetch('http://localhost:3000/clientes');\n        if (!response.ok) {\n          throw new Error('Error en la solicitud: ' + response.statusText);\n        }\n        const clientes = await response.json();\n\n        // Encontrar el cliente por su DNI\n        const clienteEncontrado = clientes.find(c => c.dni === cliente.dni);\n\n\n        if (clienteEncontrado) {\n          // Convertir la fecha de alta al formato dd/mm/yyyy\n          // Asignar el objeto completo de provincia y municipio\n          if (this.cliente.provincia) {\n            this.cliente.provincia = this.provincias.find(p => p.nm === this.cliente.provincia).nm;\n            if (this.cliente.provincia) {\n              console.log(\"Provincia encontrada\", this.cliente.provincia);\n\n            }\n          }\n\n          this.cliente = { ...clienteEncontrado };\n          this.editDni = true;\n          console.log(\"Cliente encontrado\", this.cliente.municipio);\n          if (this.cliente.alta) {\n            this.cliente.alta = this.cliente.alta.split('T')[0];  // Para asegurarse de que la fecha esté en formato YYYY-MM-DD\n          }\n        } else {\n          this.mostrarAlerta('Error', 'Cliente no encontrado en el servidor.', 'error');\n        }\n      } catch (error) {\n        console.error(error);\n        this.mostrarAlerta('Error', 'No se pudo cargar el cliente desde el servidor.', 'error');\n      }\n    },\n\n\n    limpiarFormCli() {\n      this.cliente = {\n        dni: '',\n        alta: '',\n        apellidos: '',\n        nombre: '',\n        direccion: '',\n        email: '',\n        provincia: '',\n        municipio: '',\n        baja: ''\n      }\n\n      this.editDni = false;\n    },\n\n    validarDNI(dni) {\n      if (dni === '') {\n        // Si el campo está vacío, no hace nada\n        return true;\n      }\n      dni = dni.toUpperCase(); // Convertir a mayúsculas\n      this.cliente.dni = dni;\n      // Comprobar el formato del DNI/NIE\n      const dniRegex = /^[XYZ0-9][0-9]{7}[A-Z]$/; // Formato 8 dígitos seguido de 1 letra\n\n      if (!dniRegex.test(dni)) {\n        this.mostrarAlerta('Error', 'El NIE/DNI con formato no válido.', 'error');\n        return false;\n      }\n\n      // Inicializar variables para el cálculo\n      let dniNum = dni.substring(0, 8); // Extraer los númerhttp://localhost:3000/provinciasos\n      const letra = dni.charAt(8); // Obtener la letra en la posición 8\n      // Identificación del NIE y sustitución\n      if (dniNum.charAt(0) === 'X') {\n        dniNum = dniNum.substring(1, 8)\n        dniNum = '0' + dniNum; // Sustituir X por 0\n      } else if (dniNum.charAt(0) === 'Y') {\n        dniNum = dniNum.substring(1, 8)\n        dniNum = '1' + dniNum; // Sustituir Y por 1\n      } else if (dni.charAt(0) === 'Z') {\n        dniNum = dniNum.substring(1, 8)\n        dniNum = '2' + dniNum; // Sustituir Z por 2\n      }\n\n      // Comprobar la letra esperada\n      const letras = 'TRWAGMYFPDXBNJZSQVHLCKE'; // Letras válidas para el DNI\n      const letraCalculada = letras[dniNum % 23]; // Calcular la letra esperada\n      if (letra !== letraCalculada) {\n        this.mostrarAlerta('Error', 'DNI/NIE Incorrecto.', 'error');\n        return false;\n      }\n\n      return true; // DNI/NIE válido\n\n    },\n\n    validarTelefono(telefono) {\n      if (telefono == '') {\n        this.mostrarAlerta('Error', 'El teléfono con formato no valido', 'error');\n      }\n      const regex = /^[67]\\d{8}$/;\n      if (!regex.test(telefono)) {\n        this.mostrarAlerta('Error', 'El teléfono con formato no valido', 'error')\n      }\n    },\n\n    async getClientes() {\n      try {\n        const response = await fetch('http://localhost:3000/clientes');\n        if (!response.ok) {\n          throw new Error('Error en la solicitud:' + response.statusText);\n        }\n        this.clientes = (await response.json()).sort((a, b) => a.apellidos.localeCompare(b.apellidos) || a.nombre.localeCompare(b.nombre));\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async getProvincias() {\n      try {\n        const response = await fetch('http://localhost:3000/provincias');\n        if (!response.ok) {\n          throw new Error('Error en la solicitud:' + response.statusText);\n        }\n        this.provincias = await response.json();\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async getMunicipios() {\n      try {\n        const response = await fetch('http://localhost:3000/municipios');\n        if (!response.ok) {\n          throw new Error('Error en la solicitud:' + response.statusText);\n        }\n        this.municipios = await response.json();\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    mostrarAlerta(titulo, mensaje, icono) {\n      Swal.fire({\n        title: titulo,\n        text: mensaje,\n        icon: icono,\n        customClass: {\n          container: 'custom-alert-container',\n          popup: 'custom-alert-popup',\n          modal: 'custom-alert-modal'\n        }\n      })\n    },\n    obtenerFechaHoy() {\n      const fecha = new Date();\n      const opciones = { day: '2-digit', month: '2-digit', year: 'numeric' };\n      const fechaFormateada = new Intl.DateTimeFormat('es-ES', opciones).format(fecha);\n      //return fecha.toLocaleDateString('es-ES');  // Formato dd/mm/yyyy\n      return fechaFormateada;\n    },\n\n    async grabarcliente() {\n      // Verificar si los campos requeridos están llenos\n      if (this.cliente.dni && this.cliente.apellidos && this.cliente.telefono) {\n        try {\n          this.cliente.baja = '';\n          // Obtener los clientes existentes\n          const response = await fetch('http://localhost:3000/clientes');\n          if (!response.ok) {\n            throw new Error('Error al obtener los clientes: ' + response.statusText);\n          }\n\n          const clientesExistentes = await response.json();\n\n          const clienteExistente = clientesExistentes.find(cliente => cliente.dni === this.cliente.dni);\n\n          if (clienteExistente) {\n\n            clienteExistente.baja = '';\n            const actualizarResponse = await fetch(`http://localhost:3000/clientes/${clienteExistente.id}`, {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify(clienteExistente),\n            });\n\n            if (!actualizarResponse.ok) {\n              throw new Error('Error al actualizar el cliente: ' + actualizarResponse.statusText);\n            }\n\n            this.mostrarAlerta('Aviso', 'Cliente reactivado correctamente', 'success');\n            this.getClientes();\n          } else {\n            const crearResponse = await fetch('http://localhost:3000/clientes', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify(this.cliente),\n            });\n\n            if (!crearResponse.ok) {\n              throw new Error('Error al guardar el cliente: ' + crearResponse.statusText);\n            }\n\n            const nuevoCliente = await crearResponse.json();\n            this.clientes.push(nuevoCliente);\n            this.mostrarAlerta('Aviso', 'Cliente grabado correctamente', 'success');\n            this.getClientes();\n          }\n        } catch (error) {\n          console.error(error);\n          this.mostrarAlerta('Error', 'No se pudo grabar el cliente.', 'error');\n        }\n      } else {\n        this.mostrarAlerta('Error', 'Por favor, completa todos los campos requeridos.', 'error');\n      }\n    },\n\n    async eliminarcliente() {\n      try {\n        const response = await fetch(\"http://localhost:3000/clientes\");\n        if (!response.ok) {\n          throw new Error(\"Error en la solicitud: \" + response.statusText);\n        }\n\n        const clientes = await response.json();\n        const clienteExistente = clientes.find(cliente => cliente.dni === this.cliente.dni);\n\n        if (clienteExistente) {\n          const fechaHoy = this.obtenerFechaHoy(); // Llamada a la función correctamente\n\n          clienteExistente.baja = fechaHoy;\n\n          await fetch(`http://localhost:3000/clientes/${clienteExistente.id}`, { // URL interpolada correctamente\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(clienteExistente),\n          });\n\n          this.mostrarAlerta(\"Aviso\", \"Cliente dado de baja correctamente\", \"success\");\n          this.getClientes(); // Actualizar lista de clientes\n\n        } else {\n          this.mostrarAlerta(\"Error\", \"Cliente no encontrado\", \"error\");\n        }\n      } catch (error) {\n        console.error(error);\n        this.mostrarAlerta(\"Error\", \"No se pudo dar de baja al cliente\", \"error\");\n      }\n    },\n\n    async modificarcliente() {\n      if (this.cliente.dni) {\n        try {\n\n\n          const response = await fetch(`http://localhost:3000/clientes/${this.cliente.id}`, { // URL interpolada correctamente\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(this.cliente),\n          });\n\n\n          if (!response.ok) {\n            throw new Error('Error al modificar el cliente:' + response.statusText);\n          }\n          this.mostrarAlerta(\"Aviso\", \"Cliente modificado correctamente\", \"success\");\n          this.getClientes();\n\n        } catch (error) {\n          console.error(error);\n        }\n      } else {\n        this.mostrarAlerta('Error', 'Debe seleccionar un cliente para modificar', 'error')\n      }\n    },\n\n\n  },\n}\n\n</script>\n\n<style scoped>\n.custom-date-input {\n  width: 12em;\n  text-align: center;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}